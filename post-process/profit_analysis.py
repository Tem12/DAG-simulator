import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import argparse


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--blocks', type=int, required=True,
                        help='Number of blocks in simulation')
    parser.add_argument('--block_size', type=int, required=True,
                        help='Transaction count in each block')
    parser.add_argument('--miners_count', type=int,
                        required=True, help='Miners count in specified config')
    parser.add_argument('--data', type=str, required=True,
                        help='Data file generated by simulation')
    parser.add_argument('--config', type=str, required=True,
                        help='Configuration file used in simulation')

    args = parser.parse_args()

    malicious_miners_indexes = parse_config(args.config)
    miners_len = args.miners_count
    blocks = args.blocks
    block_size = args.block_size

    tx_num = blocks * block_size

    miners_profit = [0] * miners_len

    df = pd.read_csv(args.data)

    total_profit = 0
    for i in range(0, tx_num):
        minerId = df['MinerID'][i]
        miners_profit[minerId] += df['Fee'][i]
        total_profit += df['Fee'][i]

    malicious_miners_perc_profit = 0

    print(f'Data: {args.data}')
    print(f'Config: {args.config}')

    for i in range(len(malicious_miners_indexes)):
        miner_perc_profit = round(miners_profit[malicious_miners_indexes[i]] / total_profit * 100, 2)
        malicious_miners_perc_profit += miner_perc_profit
        print(f'Malicious miner #{i} profit: {miner_perc_profit}%')
    
    print(f'Honest miners profit: {round(100 - malicious_miners_perc_profit, 2)}%') 

    return 0


def parse_config(file_path):
    malicious_miners_indexes = []
    with open(file_path, 'r') as file:
        i = 0
        for row in file:
            if row.startswith('biconnect'):
                # Part of config with miners is searched, close config
                break
            if row.startswith('miner'):
                if row.rstrip('\n').split(' ')[1] == 'malicious':
                    malicious_miners_indexes.append(i)
                i += 1

    return malicious_miners_indexes


if __name__ == "__main__":
    main()
