import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import argparse


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--blocks', type=int, required=True,
                        help='Number of blocks in simulation')
    parser.add_argument('--block_size', type=int, required=True,
                        help='Transaction count in each block')
    parser.add_argument('--data', type=str, required=True,
                        help='Data file generated by simulation')
    parser.add_argument('--config', type=str, required=True,
                        help='Configuration file used in simulation')

    args = parser.parse_args()

    blocks = args.blocks
    block_size = args.block_size

    total_count = blocks * block_size

    df = pd.read_csv(args.data)

    txs = {}

    count_0 = 0
    count_1 = 0
    count_2 = 0
    count_3 = 0
    count_4 = 0
    count_5 = 0
    count_more = 0

    for i in range(0, total_count):
        tx_id = df['TransactionID'][i]
        if tx_id in txs:
            if txs[tx_id] == 1:
                count_1 -= 1
                count_2 += 1
            elif txs[tx_id] == 2:
                count_2 -= 1
                count_3 += 1
            elif txs[tx_id] == 3:
                count_3 -= 1
                count_4 += 1
            elif txs[tx_id] == 4:
                count_4 -= 1
                count_5 += 1
            elif txs[tx_id] == 5:
                count_5 -= 1
                count_more += 1
            txs[tx_id] += 1
        else:
            txs[tx_id] = 1
            count_1 += 1

    count_0 = total_count - count_1 - count_2 - count_3 - count_4 - count_5 - count_more

    print(f'Data: {args.data}')
    print(f'Config: {args.config}')

    print(f'0 tx count (not processed): {count_0} ({round(count_0 / total_count * 100, 2)}%)')
    print(f'1 tx count (unique): {count_1} ({round(count_1 / total_count * 100, 2)}%)')
    print(f'2 tx count: {count_2} ({round(count_2 / total_count * 100, 2)}%)')
    print(f'3 tx count: {count_3} ({round(count_3 / total_count * 100, 2)}%)')
    print(f'4 tx count: {count_4} ({round(count_4 / total_count * 100, 2)}%)')
    print(f'5 tx count: {count_5} ({round(count_5 / total_count * 100, 2)}%)')
    print(f'More count: {count_more} ({round(count_more / total_count * 100, 2)}%)')
    print(f'Duplicates (2 tx count or more): {round((total_count - count_0 - count_1) / total_count * 100, 2)}%')
    print(f'Duplicates with 0 count: {round((total_count - count_1) / total_count * 100, 2)}%')

    return 0


if __name__ == "__main__":
    main()
